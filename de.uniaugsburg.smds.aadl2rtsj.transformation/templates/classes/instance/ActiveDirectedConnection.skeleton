import static de.uniaugsburg.smds.aadl2rtsj.utils.Utils.*;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import org.eclipse.jdt.internal.core.util.MethodParametersAttribute;
import org.osate.aadl2.Classifier;
import org.osate.aadl2.instance.ConnectionInstance;
import org.osate.aadl2.instance.ConnectionInstanceEnd;
import org.osate.aadl2.instance.FeatureInstance;

import static de.uniaugsburg.smds.aadl2rtsj.utils.Constants.*;

public class CLASS{
	
	private static String getConstructorParameters(ConnectionInstance connection){
		StringBuilder sb = new StringBuilder();
		for (ConnectionInstance con : getNextConnections(connection)) {
			sb.append(new MethodParameterStatement().generate(con));
		}
		return sb.toString().trim();
	}
	
	private static String getConstructorAssignmentStatements(ConnectionInstance connection){
		StringBuilder sb = new StringBuilder();
		for (ConnectionInstance con : getNextConnections(connection)) {
			sb.append(new ConstructorAssignmentStatement().generate(con));
		}
		return sb.toString().trim();
	}
	
	private static String getNextConnectionsMemberStatements(ConnectionInstance connection){
		StringBuilder sb = new StringBuilder();
		for (ConnectionInstance con : getNextConnections(connection)) {
			sb.append(new DeclarationMemberStatement().generate(con));
		}
		return sb.toString().trim();
	}
	
	private static String getNextConnectionsPutValueStatements(ConnectionInstance connection){
		StringBuilder sb = new StringBuilder();
		for (ConnectionInstance con : getNextConnections(connection)) {
			sb.append(new PutValueStatement().generate(con));
		}
		return sb.toString().trim();
	}
	
	private static String getNextConnectionsImportStatements(ConnectionInstance connection){
		StringBuilder sb = new StringBuilder();
		for (ConnectionInstance con : getNextConnections(connection)) {
			sb.append(new ImportStatement().generate(con));
		}
		return sb.toString().trim();
	}
	
	private static String getConnectionDataType(ConnectionInstance connection){
		// we don't consider splitting or aggregation of data types currently, so it's sufficient to check one connectionend for its datatype
		// the end must be a FeatureInstance as we only consider data ports at the moment
		return getDataType((FeatureInstance)connection.getSource());
	}
	
	//Helper Method
	private static List<ConnectionInstance> getNextConnections(ConnectionInstance connection){
		// TODO: maybe we need to treat data targets differently 
		return connection.getDestination().getSrcConnectionInstances();
	}
	/*
	 * (non-javadoc)
	 * 
	 * @see IGenerator#generate(Object)
	 */
	public String generate(ConnectionInstance connection) {
		return "";
	}
	
}