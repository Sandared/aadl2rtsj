import static de.uniaugsburg.smds.aadl2rtsj.utils.Utils.*;
import static de.uniaugsburg.smds.aadl2rtsj.utils.Constants.*;

import java.util.List;
import java.util.logging.Logger;

import org.osate.aadl2.Classifier;
import org.osate.aadl2.instance.ConnectionInstance;
import org.osate.aadl2.instance.FeatureInstance ;

public class CLASS{
	private static final Logger log = Logger.getLogger( OutDataPortConverter.class.getName() );
	
	private static String getDataTypeImportStatement(FeatureInstance feature){
		Classifier classifier = feature.getFeature().getClassifier();
		// if it is a base type, then we don't have to import anything, as Integer, Boolean etc are part of java.lang
		if(classifier == null || isBaseType(classifier))
			return "";
		return new ImportStatement().generate(classifier);
	}
	
	private static String getConnectionImportStatements(FeatureInstance feature){
		StringBuilder sb = new StringBuilder();
		//for all connections we have to create an import statement
		for (ConnectionInstance connection : feature.getSrcConnectionInstances()) {
			sb.append(new ImportStatement().generate(connection));
		}
		return sb.toString().trim();
	}
	
	private static String getConnectionMemberStatements(FeatureInstance feature){
		StringBuilder sb = new StringBuilder();
		//for all connections we have to create an import statement
		for (ConnectionInstance connection : feature.getSrcConnectionInstances()) {
			sb.append(new DeclarationMemberStatement().generate(connection));
		}
		return sb.toString().trim();
	}
	
	private static String getSendOuputMethods(FeatureInstance feature){
		StringBuilder sb = new StringBuilder();
		//for all connections we have to create an import statement
		for (ConnectionInstance connection : feature.getSrcConnectionInstances()) {
			sb.append(new SendOutputMethod().generate(feature, connection));
		}
		return sb.toString().trim();
	}
	
	private static String getConstructorParameters(FeatureInstance feature){
		List<ConnectionInstance> connections = feature.getSrcConnectionInstances();
		// for each connection we have to create a parameter
		if(connections.size() > 0){
			StringBuilder sb = new StringBuilder();
			for(ConnectionInstance connection : connections){
				sb.append(new MethodParameterStatement().generate(connection));
			}
			// delete pending commata ", "
			sb.delete(sb.length()-2, sb.length());
			return sb.toString().trim();
		}
		return "";
	}
	
	private static String getConstructorMemberAssignments(FeatureInstance feature){
		List<ConnectionInstance> connections = feature.getSrcConnectionInstances();
		// for each connection we have to create an assignment
		if(connections.size() > 0){
			StringBuilder sb = new StringBuilder();
			for(ConnectionInstance connection : connections){
				sb.append(new ConstructorAssignmentStatement().generate(connection));
			}
			return sb.toString().trim();
		}
		return "";
	}
	
	/*
	 * (non-javadoc)
	 * 
	 * @see IGenerator#generate(Object)
	 */
	public String generate(FeatureInstance feature) {
		return "";
	}
	
}