DATAPORT
INPUT

8.3 (2)
The content of incoming ports are frozen at a specified time, by default at dispatch time. This means that the
content of the port that is accessible to the recipient does not change during the execution of a dispatch even
though the sender may send new values. Properties specify the input and output timing characteristics of ports.
Actual event and data transfer may be initiated by the runtime system of the execution platform or by
Send_Output runtime service calls in the application source text

8.3 (3)
[...] Data ports are event data
ports with a queue size of one in which the newest arrival is kept. By default arrival of data at data ports does not
trigger a dispatch. Data ports effectively represent unqueued ports that communicate state information, such as
signal streams that are sampled and processed in control loops. [...]

8.3.1 (4)
[...] Ports that pass data are typed by
naming a data component classifier reference. 

8.3.1 (5)
A data or event data port maps to a static variable in the source text that represents the data buffer or queue. By
default the variable is accessible by the same name as the port name. A different name mapping can be specified
with the Source_Name and Source_Text properties.
The Allowed_Memory_Binding and
Allowed_Memory_Binding_Class properties indicate the memory (or device) hardware the port resources
reside on.

8.3.1 (12)
Data ports are intended for transmission of state data such as sensor data streams. Therefore, no queuing is
supported for data ports. A thread can determine whether the input buffer of an in data port has new data at this
dispatch by checking the port status through a Get_Count service call, which is accessible through the port
variable through a Get_Value service call. If no new data value has been received the old value is made
available.

8.3.2 (16)
Data, events, and event data arriving through incoming ports is made available to the receiving thread, processor,
or device at a specified input time. For a data port the input that is available through a port variable is a data value,
while for an event or event data port it can be one or more elements from the port queue according to a specified
dequeuing protocol (see Section 8.3.3). From that point on any newly arriving data, event, or event data is not
available to the receiving component until the next dispatch, i.e., the content of an incoming port that is accessible
to the application code does not change while the thread completes its execution.

8.3.2 (17)
By default, port input is frozen at dispatch time. For periodic threads or devices this means that input is sampled at
fixed time intervals.

8.3.2 (18)
The Input_Time property can be used to explicitly specify an input time for ports. This can be done for all ports
by specifying the property value for the thread, or it can be specified separately for each port.

8.3.2 (20)
The Input_Time property can have a list of values. In this case it indicates that input is frozen multiple times for
the execution of a dispatch. If a thread has multiple input times specified, then the content of an incoming port is
frozen multiple times during a single dispatch.

8.3.2 (21)
The input may be frozen at dispatch time (Input_Time property value of Dispatch) as part of the underlying
runtime system, or it may be frozen through a Receive_Input service call in the source text (Input_Time
property value of Start or Completion).

DATAPORT 
OUTPUT

8.3.2 (25)
By default, the output time, i.e., the time output is transmitted to connected components, is the completion time for
data ports. By default, for event and event data ports the output time occurs anytime during the execution through
a Send_Output service call.

8.3.2 (26)
The Output_Time property can be used to explicitly specify an output time for ports. This can be done for all
ports by specifying the property value for the thread, or it can be specified separately for each port.

8.3.2 (28)
The Output_Time property can have a list of values. In this case it indicates that output is transmitted multiple
times as part of the execution of a dispatch.

8.3.2 (29)
The output may be transmitted at completion time or deadline as part of the underlying runtime system, or it may be
transmitted through a Send_Output service call in the source text.

8.3.2(30) 
If the output time of the originating port is Completion_Time while the input time of the receiving port is
Dispatch and the sender and receiver are in the same synchronization domain, then the output is received at the
next dispatch equal to or later than the deadline. To accommodate the transfer the actual transfer may be initiated
before the deadline. In the case of the connection crossing synchronization domains, the input is received at the
dispatch following the completion of the transfer.

8.3.2(31) 
The Input_Rate and Output_Rate properties specify the number of times per dispatch (perDispatch) or per
second (perSecond) at which input and output is expected to occur at the port with the associated property. By
default the input and output rate of ports is once per dispatch. The rate can be fixed or according to a
distribution.

8.3.2(32) 
An input or output rate higher than once per dispatch indicates that multiple inputs or multiple outputs are expected
during a single dispatch. An input or output rate lower than once per dispatch indicates that inputs or outputs are
not expected at every dispatch.

8.3.2(33) 
If an Input_Time or Output_Time property is specified, then the values must be consistent with the rate. If the
rate is specified in terms of seconds and a period is specified for the thread or device with the port, then the period
value must also be consistent with the other values. In the case of an Input_Time or Output_Time property
value of NoIO the rate value does not apply.

