[comment encoding = UTF-8 /]
[module IOHandlerGenerator('http://aadl.info/AADL/2.0', 'http://aadl.info/AADL/2.0/instance', 'http://www.uniaugsburg.de/smds/aadl2rtsj/generation/util')]
[import de::uniaugsburg::smds::aadl2rtsj::generation::services::ComponentInstanceHelper /]
[import de::uniaugsburg::smds::aadl2rtsj::generation::services::ComponentClassifierHelper /]
[import de::uniaugsburg::smds::aadl2rtsj::generation::services::PropertyHelper /]

[template public generateIOHandler(component : ComponentInstance, feature : FeatureInstance, time : OffsetTime)]
[file(getPackageName(component).substitute('.', '/').concat('/').concat(getHandlerClassName(feature, time)).concat('.java') , false, 'UTF-8')]
package [getPackageName(component)/];

import javax.realtime.Timer;
import javax.realtime.OneShotTimer;
import javax.realtime.RelativeTime;
import javax.realtime.PriorityParameters;
import javax.realtime.BoundAsyncEventHandler;
import de.uniaugsburg.smds.aadl2rtsj.generation.util.DataPort;
import [feature.getClassifier().getPackageName()/].[feature.getClassifier().getClassName()/];

public class [getHandlerClassName(feature, time)/] extends BoundAsyncEventHandler{
	private DataPort<[feature.getClassifier().getClassName()/]> port;
	
	public [getHandlerClassName(feature, time)/](DataPort<[feature.getClassifier().getClassName()/]> port){
		this.port =  port;
		setSchedulingParameters(new PriorityParameters([component.getPriority()/]));
		// TODO: PeriodicParameters for deadline/cost/misshandler/overrunhandler?
		Timer timerFor[getHandlerClassName(feature, time)/] = new OneShotTimer(new RelativeTime([time.ms.toString()/], [time.ns.toString()/]), this);
		timerFor[getHandlerClassName(feature, time)/].start();
	}
	
	@Override
	public void handleAsyncEvent() {
		//TODO
	}
}
[/file]

[/template]


