[comment encoding = UTF-8 /]
[module IOHandlerGenerator('http://aadl.info/AADL/2.0', 'http://aadl.info/AADL/2.0/instance', 'http://www.uniaugsburg.de/smds/aadl2rtsj/generation/util')]
[import de::uniaugsburg::smds::aadl2rtsj::generation::services::ComponentInstanceHelper /]
[import de::uniaugsburg::smds::aadl2rtsj::generation::services::ComponentClassifierHelper /]
[import de::uniaugsburg::smds::aadl2rtsj::generation::services::PropertyHelper /]

[template public generateInputHandler(component : ComponentInstance, feature : FeatureInstance, time : OffsetTime)]
[file(getPackageName(component).substitute('.', '/').concat('/').concat(getHandlerClassName(time)).concat('.java') , false, 'UTF-8')]
package [getPackageName(component)/];

import javax.realtime.Timer;
import javax.realtime.OneShotTimer;
import javax.realtime.RelativeTime;
import javax.realtime.PriorityParameters;
import javax.realtime.BoundAsyncEventHandler;
import de.uniaugsburg.smds.aadl2rtsj.generation.util.DataPort;
import [feature.getClassifier().getPackageName()/].[feature.getClassifier().getClassName()/];

public class [getHandlerClassName(time)/] extends BoundAsyncEventHandler{
	private DataPort<[feature.getClassifier().getClassName()/]> port;
	
	public [getHandlerClassName(time)/](DataPort<[feature.getClassifier().getClassName()/]> port){
		this.port =  port;
		setSchedulingParameters(new PriorityParameters([component.getPriority()/]));
		Timer timerFor[getHandlerClassName(time)/] = new OneShotTimer(new RelativeTime([time.ms.toString()/], [time.ns.toString()/]), this);
		timerFor[getHandlerClassName(time)/].start();
	}
	
	@Override
	public void handleAsyncEvent() {
		port.receiveInput();
	}
}
[/file]
[/template]

[template public generateOutputHandler(component : ComponentInstance, feature : FeatureInstance, time : OffsetTime)]
[file(getPackageName(component).substitute('.', '/').concat('/').concat(getHandlerClassName(time)).concat('.java') , false, 'UTF-8')]
package [getPackageName(component)/];

import javax.realtime.Timer;
import javax.realtime.OneShotTimer;
import javax.realtime.RelativeTime;
import javax.realtime.PriorityParameters;
import javax.realtime.BoundAsyncEventHandler;
import de.uniaugsburg.smds.aadl2rtsj.generation.util.DataPort;
import de.uniaugsburg.smds.aadl2rtsj.generation.util.ConnectionBroker;
import [feature.getClassifier().getPackageName()/].[feature.getClassifier().getClassName()/];

public class [getHandlerClassName(time)/] extends BoundAsyncEventHandler{
	private DataPort<[feature.getClassifier().getClassName()/]> port;
	private ConnectionBroker broker;
	private String connectionName;
	
	public [getHandlerClassName(time)/](DataPort<[feature.getClassifier().getClassName()/]> port,  ConnectionBroker broker, String connectionName){
		this.port = port;
		this.broker = broker;
		this.connectionName = connectionName;
		setSchedulingParameters(new PriorityParameters([component.getPriority()/]));
		Timer timerFor[getHandlerClassName(time)/] = new OneShotTimer(new RelativeTime([time.ms.toString()/], [time.ns.toString()/]), this);
		timerFor[getHandlerClassName(time)/].start();
	}
	
	@Override
	public void handleAsyncEvent() {
		broker.sendOnConnection(connectionName, port.getFWData());
	}
}
[/file]
[/template]

