[comment encoding = UTF-8 /]
[module DataPortGenerator('http://aadl.info/AADL/2.0', 'http://aadl.info/AADL/2.0/instance')]
[template public generateGenericDataPort()]
[file ('de/uniaugsburg/smds/aadl2rtsj/generation/util/DataPort.java', false, 'UTF-8')]
package de.uniaugsburg.smds.aadl2rtsj.generation.util;

public class DataPort<T>{
	private volatile T outFWData = null;
	private volatile T inFWData = null;
	private volatile boolean isDirty = false;
	private volatile T outData = null;
	private volatile T inData = null;
	
	private OutPort<T> outPort = new InnerOutPort<T>();
	private InPort<T> inPort = new InnerInPort<T>();
	private InOutPort<T> inOutPort = new InnerInOutPort<T>();
	
	public void setFWData(T data){
		inData = data;
		isDirty = true;
	}

	public synchronized T getFWData(){
		outFWData = outData;
		return outFWData;
	} 

	public void receiveInput(){
		//The data is either a DeepCopyable or a primitve type
		if(inData instanceof DeepCopyable)
			inData = (T)((DeepCopyable)inFWData).deepCopy();
		else
			inData = copyPrimitive(inFWData);
		isDirty = false;
	}
	
	public OutPort<T> getUserOutPort(){
		return outPort;
	}
	
	public InPort<T> getUserInPort(){
		return inPort;
	}
	
	public InOutPort<T> getUserInOutPort(){
		return inOutPort;
	}

	private T copyPrimitive(T original){
		if(original instanceof Boolean){
			return (T) new Boolean(((Boolean) original).booleanValue());
		}
		if(original instanceof Float){
			return (T) new Float(((Float) original).floatValue());
		}
		if(original instanceof Integer){
			return (T) new Integer(((Integer) original).intValue());
		}
		if(original instanceof String){
			return (T) new String((String)original);
		}
		if(original instanceof Double){
			return (T) new Double(((Double) original).doubleValue());
		}
		//Error?
		return null;
	}

	
	public class InnerOutPort<X extends T> implements OutPort<X>{
		@Override
		public boolean isDirty(){
			return isDirty;
		}
		@Override
		public void setData(X data){
			outData = data;
		}
	}
	
	public class InnerInPort<X extends T> implements InPort<X>{
		@Override
		public boolean isDirty(){
			return isDirty;
		}
		@Override
		public synchronized X getData(){
			inData = inFWData;
			return (X)inData;
		}
	}
	
	public class InnerInOutPort<X extends T> implements InOutPort<X>{
		@Override
		public boolean isDirty(){
			return isDirty;
		}
		@Override
		public synchronized X getData(){
			inData = inFWData;
			return (X)inData;
		}
		@Override
		public void setData(X data){
			outData = data;
		}
	}
}

[/file]
[/template]
