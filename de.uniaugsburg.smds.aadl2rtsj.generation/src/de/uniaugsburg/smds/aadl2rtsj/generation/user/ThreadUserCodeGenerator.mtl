[comment encoding = UTF-8 /]
[module ThreadUserCodeGenerator('http://aadl.info/AADL/2.0/instance', 'http://aadl.info/AADL/2.0')]
[import de::uniaugsburg::smds::aadl2rtsj::generation::services::ComponentInstanceHelper /]
[import de::uniaugsburg::smds::aadl2rtsj::generation::services::ComponentClassifierHelper /]

[template public generateUserCode(thread : ComponentInstance){ classifier : ComponentClassifier = thread.getClassifier(); }]
[file(thread.getUserCodeFileName() , false, 'UTF-8')]
package [thread.getUserCodePackageName()/];

import de.uniaugsburg.smds.aadl2rtsj.generation.util.InPort;
import de.uniaugsburg.smds.aadl2rtsj.generation.util.OutPort;
import de.uniaugsburg.smds.aadl2rtsj.generation.util.InOutPort;

//########## Classifier Imports ##########
	[comment import all classifiers of this thread (usually only the datatypes of its ports), but only once for each classifier/]
	[for (classifier : ComponentClassifier | classifier.getAllFeatureClassifiers())]
import [classifier.getPackageName()/].[classifier.getClassName()/];
	[/for]

//########## Logger Import ##########
import java.util.logging.Logger;

// [protected ('addtionalImports')]
// TODO: place additionalImports here
// [/protected]

public class [thread.getUserCodeClassName()/]{

	/**
	 * The Logger to log information on
	 */
	private static final Logger log = Logger.getLogger([thread.getUserCodeClassName()/].class.getName());

	[comment create a member variable for each port /]
	[for (feature : Feature | classifier.getAllFeatures())]
		[if (feature.isIncoming())]
			[if (feature.isOutgoing())]
	private InOutPort<[feature.getClassifier().getClassName()/]> [feature.name/];
			[else]
	private InPort<[feature.getClassifier().getClassName()/]> [feature.name/];
			[/if]
		[else]
	private OutPort<[feature.getClassifier().getClassName()/]> [feature.name/];
		[/if]
	[/for]

	public [thread.getClassName()/]UserCode([classifier.getConstructorParameters()/]){
	[for (feature : Feature | classifier.getAllFeatures())]
		this.[feature.name/] = [feature.name/];
	[/for]	
	}

	public void dispatch(){
		// [protected ('dispatch')]
		// TODO: place dispatch code here
		// [/protected]
	}

	public void start(){
		// [protected ('start')]
		// TODO: place start code here
		// [/protected]
	}

	public void completion(){
		// [protected ('completion')]
		// TODO: place completion code here
		// [/protected]
	}

	public void compute(){
		// [protected ('compute')]
		// TODO: place compute code here
		log.info("[thread.getUserCodeClassName()/] executing...");
		// [/protected]
	}

	// [protected ('helperstuff')]
	// TODO: place helperstuff code here
	// [/protected]
}
[/file]
[/template]

[template private getConstructorParameters(thread : ComponentClassifier) post (replaceAll('\n', '').trim())]
[for (feature : Feature | thread.getAllFeatures())separator (',')]
	[if (feature.isIncoming())]
		[if (feature.isOutgoing())]
InOutPort<[feature.getClassifier().getClassName()/]> [feature.name/]
		[else]
InPort<[feature.getClassifier().getClassName()/]> [feature.name/]
		[/if]
	[else]
OutPort<[feature.getClassifier().getClassName()/]> [feature.name/]
	[/if]
[/for]
[/template]
