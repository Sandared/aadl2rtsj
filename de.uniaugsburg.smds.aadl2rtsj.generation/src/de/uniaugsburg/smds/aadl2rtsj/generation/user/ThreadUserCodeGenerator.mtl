[comment encoding = UTF-8 /]
[module ThreadUserCodeGenerator('http://aadl.info/AADL/2.0/instance', 'http://aadl.info/AADL/2.0')]
[import de::uniaugsburg::smds::aadl2rtsj::generation::services::ComponentInstanceHelper /]
[import de::uniaugsburg::smds::aadl2rtsj::generation::services::ComponentClassifierHelper /]

[template public generateUserCode(thread : ComponentInstance){ classifier : ComponentClassifier = thread.getClassifier(); }]
[file(thread.getPackageName(true).substitute('.', '/').concat('/').concat(thread.getClassName().concat('UserCode')).concat('.java') , false, 'UTF-8')]
package [thread.getPackageName(true)/];

import de.uniaugsburg.smds.aadl2rtsj.generation.util.InPort;
import de.uniaugsburg.smds.aadl2rtsj.generation.util.OutPort;
import de.uniaugsburg.smds.aadl2rtsj.generation.util.InOutPort;

//########## Classifier Imports ##########
	[comment import all classifiers of this thread (usually only the datatypes of its ports), but only once for each classifier/]
	[for (classifier : ComponentClassifier | classifier.getAllFeatureClassifiers())]
import [classifier.getPackageName()/].[classifier.getClassName()/];
	[/for]


public class [thread.getUserCodeClassName()/]{

	[comment create a member variable for each port /]
	[for (feature : Feature | classifier.getAllFeatures())]
		[if (feature.isIncoming())]
			[if (feature.isOutgoing())]
	private InOutPort<[feature.getClassifier().getClassName()/]> [feature.name/];
			[else]
	private InPort<[feature.getClassifier().getClassName()/]> [feature.name/];
			[/if]
		[else]
	private OutPort<[feature.getClassifier().getClassName()/]> [feature.name/];
		[/if]
	[/for]

	public [thread.getClassName()/]UserCode([classifier.getConstructorParameters()/]){
	[for (feature : Feature | classifier.getAllFeatures())]
		this.[feature.name/] = [feature.name/];
	[/for]	
	}

	public void dispatch(){
		// TODO: Generated 
	}

	public void start(){
		// TODO: Generated 
	}

	public void completion(){
		// TODO: Generated 
	}

	public void compute(){
		// TODO: Generated 
	}
}
[/file]
[/template]

[template private getConstructorParameters(thread : ComponentClassifier) post (replaceAll('\n', '').trim())]
[for (feature : Feature | thread.getAllFeatures())separator (',')]
	[if (feature.isIncoming())]
		[if (feature.isOutgoing())]
InOutPort<[feature.getClassifier().getClassName()/]> [feature.name/]
		[else]
InPort<[feature.getClassifier().getClassName()/]> [feature.name/]
		[/if]
	[else]
OutPort<[feature.getClassifier().getClassName()/]> [feature.name/]
	[/if]
[/for]
[/template]
