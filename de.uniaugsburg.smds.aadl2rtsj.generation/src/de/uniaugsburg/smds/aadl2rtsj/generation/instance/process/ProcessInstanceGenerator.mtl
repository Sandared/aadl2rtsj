[comment encoding = UTF-8 /]
[module ProcessInstanceGenerator('http://aadl.info/AADL/2.0/instance', 'http://aadl.info/AADL/2.0')]
[import de::uniaugsburg::smds::aadl2rtsj::generation::services::ComponentInstanceHelper /]
[import de::uniaugsburg::smds::aadl2rtsj::generation::services::ComponentClassifierHelper /]
[import de::uniaugsburg::smds::aadl2rtsj::generation::util::InnerConnectionBrokerGenerator /]


[template public generateProcessInstance(process : ComponentInstance)? (isProcess(process)) { classifier : ComponentClassifier = process.getClassifier(); }]
[file(process.getPackageName().substitute('.', '/').concat('/').concat(process.getClassName()).concat('.java') , false, 'UTF-8')]
package [process.getPackageName()/];

//########## Classifier Imports ##########
	[comment import all classifiers of this ThreadImplementation, but only once for each classifier/]
	[for (classifier : ComponentClassifier | process.getClassifier().oclAsType(ComponentImplementation).getAllClassifiersForInstance())]
import [classifier.getPackageName()/].[classifier.getClassName()/];
	[/for]

//########## ConnectionBroker Import ###########
import de.uniaugsburg.smds.aadl2rtsj.generation.util.ConnectionBroker;

//########## Logger Import ##########
import java.util.logging.Logger;

public class [process.getClassName()/] extends [classifier.getClassName()/]{	
	private static final Logger log = Logger.getLogger([process.getClassName()/].class.getName());	
	
	/**
	 * ConnectionBroker to send on outgoing connections. Has to be set by the parent component.
	 */
	private ConnectionBroker parentBroker;

	/**
	 * ConnectionBroker for the connections within this Thread
	 */
	private ConnectionBroker broker;

	public [process.getClassName()/]([process.getConstructorParameters()/]){
		[comment for each subcomponent we have to create an Assignment Statement/]
		[if (process.getSubcomponents()->size() > 0)]
			[for (subcomponent : ComponentInstance | process.getSubcomponents())]
		this.[subcomponent.getObjectName()/] = [subcomponent.getObjectName()/];
			[/for]
		[/if]
	}

	//########## Inherited Methods from ConnectionBrokerable ##########
	@Override
	public void setParentConnectionBroker(ConnectionBroker parentBroker){
		this.parentBroker = parentBroker;
		broker = new [process.getClassName()/]ConnectionBroker([process.getBrokerParameters()/]);
		[for (subcomponent : ComponentInstance | process.getSubcomponents())]
		broker.addChildBroker("[subcomponent.getObjectName()/]", [subcomponent.getObjectName()/].getConnectionBroker());
		[subcomponent.getObjectName()/].setParentConnectionBroker(broker);
		[/for]
	}

	@Override
	public ConnectionBroker getConnectionBroker(){
		return broker;
	}

	[comment we have to implement the outPort wtihin the instance, becaus we only know within an instance, which name this component got as subcompnent /]
	[for (dataPort : DataPort | classifier.getAllFeatures()->select(oclIsTypeOf(DataPort)))]
		[if (dataPort.isOutgoing())]
	@Override
	protected void out[dataPort.name.toUpperFirst()/]([dataPort.getClassifier().getClassName()/] data){
		[comment broadcast Ã¼ber den parentBroker /]
		parentBroker.sendOnPort("[process.name/].[dataPort.name/]", data);
	}
		[/if]
	[/for]
}
[/file]

[process.generateInnerConnectionBroker()/]
[/template]

[template public getBrokerParameters(thread : ComponentInstance) post (replaceAll('\n', '').trim())]
parentBroker, this
[if (thread.getSubcomponents()->size()>0)]
, 
	[for (subcomponent : ComponentInstance | thread.getSubcomponents()) separator (', ')]
[subcomponent.getObjectName()/]
	[/for]
[/if]
[/template]

[template private getConstructorParameters(thread : ComponentInstance) post (replaceAll('\n', '').trim()) {connection : ConnectionInstance = getImmediateConnection(thread);}]
	[for (subcomponent : ComponentInstance | getSubcomponents(thread)) separator (', ')]
[subcomponent.getClassifier().getClassName()/] [subcomponent.getObjectName()/]
	[/for]
[/template]
