[comment encoding = UTF-8 /]
[module ThreadTypeGenerator('http://aadl.info/AADL/2.0', 'http://aadl.info/AADL/2.0/instance')]
[import de::uniaugsburg::smds::aadl2rtsj::generation::services::common::CommonHelper /]

[template public generateThreadType(thread : ComponentClassifier)]
[let threadType : ThreadType = thread]
[file(getPackageName(threadType).substitute('.', '/').concat('/').concat(getClassName(threadType)).concat('.java') , false, 'UTF-8')]
package [getPackageName(threadType)/];

//########## Feature Classifier ##########
	[comment import all classifiers of the features, but only once for each classifier/]
	[for (featureClassifier : ComponentClassifier | threadType.getFeatureClassifiers())]
import [featureClassifier.getPackageName()/].[featureClassifier.getClassName()/];
	[/for]

	[comment import the extended type if necessary/]
	[if (threadType.getExtendedClassifier() <> null)]
//########## Extends Classifier ##########
import [threadType.getExtendedClassifier().getPackageName()/].[threadType.getExtendedClassifier().getClassName()/];
	[/if]

public interface [threadType.getClassName()/][if (threadType.getExtendedClassifier() <> null)] extends [threadType.getExtendedClassifier().getClassName()/][/if]{
	[for (feature : Feature | threadType.getFeatures())]
		[let dataPort : DataPort = feature]
			[if (dataPort.isIncoming())]
				[if (dataPort.isRefined())]
	@Override
	default void set[dataPort.name.toUpperFirst()/]([dataPort.getRefinedClassifier().getClassName()/] data){
		throw new UnsupportedOperationException();
	}
				[/if]
	void set[dataPort.name.toUpperFirst()/]([dataPort.getClassifier().getClassName()/] data);
			[/if]
			[if (dataPort.isOutgoing())]
				[if (dataPort.isRefined())]
	@Override
				[/if]
	[dataPort.getClassifier().getClassName()/] get[dataPort.name.toUpperFirst()/](); 
			[/if]
		[/let]
	[/for]
}
[/file]	
[/let]
[/template]
