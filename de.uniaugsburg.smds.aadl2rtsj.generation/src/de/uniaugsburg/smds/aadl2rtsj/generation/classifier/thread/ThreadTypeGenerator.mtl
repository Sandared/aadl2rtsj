[comment encoding = UTF-8 /]
[module ThreadTypeGenerator('http://aadl.info/AADL/2.0', 'http://aadl.info/AADL/2.0/instance')]
[import de::uniaugsburg::smds::aadl2rtsj::generation::services::ComponentClassifierHelper /]

[template public generateThreadType(thread : ComponentClassifier)]
[let threadType : ThreadType = thread]
[file(getPackageName(threadType).substitute('.', '/').concat('/').concat(getClassName(threadType)).concat('.java') , false, 'UTF-8')]
package [getPackageName(threadType)/];

//########## Classifier Import ##########
	[comment import all classifiers for this component, but only once for each classifier/]
	[for (classifier : ComponentClassifier | threadType.getAllClassifiersForType())]
import [classifier.getPackageName()/].[classifier.getClassName()/];
	[/for]

/**
 * This interface represents the model element [threadType.name/]</br>
 * Each DATA PORT of [threadType.name/] is represented by a correspong in'dataPortName' or out'dataPortName' method.
 * @author thomas.driessen@informatik.uni-augsburg.de
 */
public interface [threadType.getClassName()/][if (threadType.getExtendedClassifier() <> null)] extends [threadType.getExtendedClassifier().getClassName()/][/if]{
	[for (feature : Feature | threadType.getAllFeatures())]
		[let dataPort : DataPort = feature]
			[if (dataPort.isIncoming())]
				[if (dataPort.isRefined())]
	/**
	 * This method is not meant for use, as it got refined by {@link #in[dataPort.name.toUpperFirst()/] in[dataPort.name.toUpperFirst()/]([dataPort.getClassifier().getClassName()/] data)}</br>
	 * If used nonetheless, this method throws a <tt>UnsupportedOperationException</tt>
	 * @exception UnsupportedOperationException if used
	 */
	@Override
	default void in[dataPort.name.toUpperFirst()/]([dataPort.getRefinedClassifier().getClassName()/] data){
		throw new UnsupportedOperationException();
	}
				[/if]
	void in[dataPort.name.toUpperFirst()/]([dataPort.getClassifier().getClassName()/] data);
			[/if]
			[if (dataPort.isOutgoing())]
				[if (dataPort.isRefined())]
	/**
	 * This method is not meant for use, as it got refined by {@link #out[dataPort.name.toUpperFirst()/] in[dataPort.name.toUpperFirst()/]([dataPort.getClassifier().getClassName()/] data)}</br>
	 * If used nonetheless, this method throws a <tt>UnsupportedOperationException</tt>
	 * @exception UnsupportedOperationException if used
	 */
	@Override
	default void out[dataPort.name.toUpperFirst()/]([dataPort.getRefinedClassifier().getClassName()/] data){
		throw new UnsupportedOperationException();
	}
				[/if]
	/**
	 * This method broadcasts the given data on all outgoing connections of <code>[dataPort.name/]</code></br>
	 * via the <code>parentBroker</code> of this thread.
	 * @param data the data to be broadcasted on the OUT DATA PORT <code>[dataPort.name/]</code>
	 */
	void out[dataPort.name.toUpperFirst()/]([dataPort.getClassifier().getClassName()/] data);
			[/if]
		[/let]
	[/for]
}
[/file]	
[/let]
[/template]
