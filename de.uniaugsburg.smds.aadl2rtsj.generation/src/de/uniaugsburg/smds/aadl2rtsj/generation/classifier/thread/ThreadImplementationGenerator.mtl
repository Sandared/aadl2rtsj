[comment encoding = UTF-8 /]
[module ThreadImplementationGenerator('http://aadl.info/AADL/2.0', 'http://aadl.info/AADL/2.0/instance')]
[import de::uniaugsburg::smds::aadl2rtsj::generation::services::ComponentClassifierHelper /]

[template public generateThreadImplementation(thread : ComponentClassifier)]
[let threadImpl : ThreadImplementation = thread]
[file(threadImpl.getFileName() , false, 'UTF-8')]
package [threadImpl.getPackageName()/];

//########## Classifier Imports ##########
	[comment import all classifiers of this ThreadImplementation, but only once for each classifier/]
	[for (classifier : ComponentClassifier | threadImpl.getAllClassifiersForImplementation())]
import [classifier.getPackageName()/].[classifier.getClassName()/];
	[/for]

//########## Port Variable Import ##########
	[comment if this component has in, out or in/out ports we have to import DataPort/]
	[if (threadImpl.getAllFeatures()->select(oclIsTypeOf(DataPort))->size() > 0)]
import de.uniaugsburg.smds.aadl2rtsj.generation.util.DataPort;
	[/if]

	[comment import the ConnectionBrokerable Interface if there is no more extended classifier/]
	[if (threadImpl.getExtendedClassifier() = null)]
//########## ConnectionBrokerable Import ##########
import de.uniaugsburg.smds.aadl2rtsj.generation.util.ConnectionBrokerable;
	[/if]

/**
 * This class represents the model element [threadImpl.name/].</br>
 * For each defined subcomponent it defines a member variable, which is visible to extending classes.</br>
 * For each DATA PORT that has no connections defined within [threadImpl.name/], a member variable is defined, that can store incoming or outgoing values</br>
 * For each IN DATA PORT a method is defined, that handles the incoming data.
 * 
 * @author thomas.driessen@informatik.uni-augsburg.de
 */
public abstract class [threadImpl.getClassName()/][if (threadImpl.getExtendedClassifier() <> null)] extends [threadImpl.getExtendedClassifier().getClassName()/][/if] implements [threadImpl.getRealizedClassifier().getClassName()/][if (threadImpl.getExtendedClassifier() = null)], ConnectionBrokerable[/if]{

	//########## Subcomponent Variables ##########
	[for (subcomponent : Subcomponent | threadImpl.getOwnSubcomponents())]
	/**
	 * A member variable that is used to store the subcomponent <code>[subcomponent.name/]</code>
	 */
	protected [subcomponent.getClassifier().getClassName()/] [subcomponent.name/];

	[/for]

	[comment create a data port variable for each IN DATAPORT that has no connections within this component/]
	[comment TODO maybe we need the port variable although there is a connection? /]
	//########## Data Port Variables ###########
	[for (dataPort : DataPort | threadImpl.getAllFeatures()->select(oclIsTypeOf(DataPort)))]
		[if (getOutgoingConnections(dataPort, threadImpl) -> size() = 0)]
	/**
	 * A DataPort<[dataPort.getClassifier().getClassName()/]> member variable that is</br> 
	 * used to store data for the DATA PORT <code>[dataPort.name/]</code>
	 */
	protected DataPort<[dataPort.getClassifier().getClassName()/]> [dataPort.name/] = new DataPort<[dataPort.getClassifier().getClassName()/]>();

		[/if]
	[/for]

	//########## Inherited Methods from [threadImpl.getRealizedClassifier().getClassName()/] ###########
	[for (dataPort : DataPort | threadImpl.getAllFeatures()->select(oclIsTypeOf(DataPort)))]
		[if (dataPort.isIncoming())]
			[if (dataPort.getOutgoingConnections(threadImpl)-> size() > 0)]
	/**
	 * This method forwards <code>data</code> on its respective internal connections</br>
	 * @param data the data that is sent to this thread via its <code>[dataPort.name/]</code> IN DATA PORT 
	 */
			[else]
	/**
	 * This method stores <code>data</code> in an internal port variable.</br>
	 * @param data the data that is sent to this thread via its <code>[dataPort.name/]</code> IN DATA PORT 
	 */	
			[/if]
	@Override
	public void in[dataPort.name.toUpperFirst()/]([dataPort.getClassifier().getClassName()/] data){
			[if (getOutgoingConnections(dataPort, threadImpl)-> size() > 0)]
		// send on all connections that have [dataPort.name/] as source
				[for (connection : Connection | getOutgoingConnections(dataPort, threadImpl))]
		broker.sendOnConnection("[connection.name/]", data);	
				[/for]
			[else]
		// store the data in its corresponding [dataPort.name/] variable
		this.[dataPort.name/].setFWData(data);
			[/if]
	}
			
		[/if]
	[/for]
}
[/file]	
[/let]
[/template]
