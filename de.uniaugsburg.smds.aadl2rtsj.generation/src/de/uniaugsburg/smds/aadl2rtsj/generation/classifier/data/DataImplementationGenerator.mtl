s[comment encoding = UTF-8 /]
[module DataImplementationGenerator('http://aadl.info/AADL/2.0', 'http://aadl.info/AADL/2.0/instance')]
[import de::uniaugsburg::smds::aadl2rtsj::generation::services::ComponentClassifierHelper /]
[import de::uniaugsburg::smds::aadl2rtsj::generation::services::PropertyHelper /]

[template public generateDataImplementation(data : ComponentClassifier)]
[let dataImpl : DataImplementation = data]
[file(dataImpl.getFileName(), false, 'UTF-8')]
package [dataImpl.getPackageName()/];

//########## Classifier Imports ##########
	[comment import all classifiers of this ThreadImplementation, but only once for each classifier/]
	[for (classifier : ComponentClassifier | dataImpl.getAllClassifiersForImplementation())]
import [classifier.getPackageName()/].[classifier.getClassName()/];
	[/for]

	[comment import the extended type if necessary/]
	[if (dataImpl.getExtendedClassifier() <> null)]
//########## Extends Classifier Imports ##########
import [dataImpl.getExtendedClassifier().getPackageName()/].[dataImpl.getExtendedClassifier().getClassName()/];
	[/if]

	[comment import the implemented type /]
//########## Realized Classifier Import ##########
import [dataImpl.getRealizedClassifier().getPackageName()/].[dataImpl.getRealizedClassifier().getClassName()/];

public class [dataImpl.getClassName()/][if (dataImpl.getExtendedClassifier() <> null)] extends [dataImpl.getExtendedClassifier().getClassName()/][/if] implements [dataImpl.getRealizedClassifier().getClassName()/]{
	
	//########### Subcomponents ###########
	[for (subcomponent : Subcomponent | dataImpl.getAllSubComponents()->select(oclIsTypeOf(DataSubcomponent)))]
	[comment create a member statement for each subcomponent /]
	/**
	 * A member variable to store the value for subcomponent "[subcomponent.name/]"
	 */
	private [subcomponent.getClassifier().getClassName()/] [subcomponent.name/] = new [subcomponent.getClassifier().getClassName()/]();

	[/for]
	//########### Getter/Setter ###########
	[comment create a getter/setter statement for each subcomponent depending on the Access_Right property of each/]
	[for (subcomponent : Subcomponent | dataImpl.getAllSubComponents()->select(oclIsTypeOf(DataSubcomponent)))]
		[let accessRight : String = subcomponent.getAccessRight()]
			[if (accessRight = getProperty('Memory_Properties_Access_Right_Read_Write') or accessRight = getProperty('Memory_Properties_Access_Right_Read_Only'))]
	/**
	 * @return the value of [subcomponent.name/]
	 */
	public [subcomponent.getClassifier().getClassName()/] get[subcomponent.name.toUpperFirst()/](){
		return [subcomponent.name/];
	}

			[/if]
			[if (accessRight = getProperty('Memory_Properties_Access_Right_Read_Write') or accessRight = getProperty('Memory_Properties_Access_Right_Write_Only'))]
	/**
	 * @param [subcomponent.name/] the new value for [subcomponent.name/]
	 */
	public void set[subcomponent.name.toUpperFirst()/]([subcomponent.getClassifier().getClassName()/] [subcomponent.name/]){
		this.[subcomponent.name/] = [subcomponent.name/];
	}

			[/if]
		[/let]
	[/for]
	[if (dataImpl.getExtendedClassifier() = null)]
	@Override
	public [dataImpl.getClassName()/] deepCopy(){
		[dataImpl.getClassName()/] result = new [dataImpl.getClassName()/]();
		[for (subcomponent : Subcomponent | dataImpl.getAllSubComponents()->select(oclIsTypeOf(DataSubcomponent)))]
		result.[subcomponent.name/] = [subcomponent.name/].deepCopy();
		[/for]
		return result;
	}
	[/if]
}
[/file]
[/let]
[/template]
