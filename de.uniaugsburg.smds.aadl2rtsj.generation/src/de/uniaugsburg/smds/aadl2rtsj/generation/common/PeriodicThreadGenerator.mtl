[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module PeriodicThreadGenerator('http://aadl.info/AADL/2.0', 'http://aadl.info/AADL/2.0/instance')]
[import de::uniaugsburg::smds::aadl2rtsj::generation::services::ThreadHelper/]
[import de::uniaugsburg::smds::aadl2rtsj::generation::services::CommonHelper /]


[template public generatePeriodicThread(thread : ComponentInstance)? (isThread(thread) and isPeriodic(thread))]
[file (getPackageName(thread).concat(getClassName(thread).concat('.java')), false, 'UTF-8')][/file]
package [getPackageName(thread)/];

import javax.realtime.Timer;
import javax.realtime.OneShotTimer;
import javax.realtime.RelativeTime;
import javax.realtime.PeriodicTimer;
import javax.realtime.BoundAsyncEventHandler;
import javax.realtime.PriorityParameters;

[comment  
Create an Import Statement for each Subcomponent. 
The first element in componentInstance is always the component itself./]
[if (thread.componentInstance->size() > 1)]
	[for (subcomponent : ComponentInstance | thread.componentInstance)]
		[if (subcomponent <> thread)]
			import [getPackageName(subcomponent)/].[getClassName(subcomponent)/];
		[/if]
	[/for]
[/if]

public class [getClassName(thread)/] extends BoundAsyncEventHandler{
	private final Timer timer = new PeriodicTimer(new RelativeTime(), new RelativeTime([getPeriodMilliSeconds(thread)/], [getPeriodNanoSeconds(thread)/]), this);
	[comment 
	Create a Member Statement for each Subcomponent 
	The first element in componentInstance is always the component itself./]
	[if (thread.componentInstance->size() > 1)]
		[for (subcomponent : ComponentInstance | thread.componentInstance)]
			[if (subcomponent <> thread)]
				private [getClassName(subcomponent)/] [getObjectName(subcomponent)/] = new [getClassName(subcomponent)/];
			[/if]
		[/for]
	[/if]
	[comment Create a Member Statement for each Feature/]
	[if (thread.featureInstance->size() > 0)]
		[for (feature : FeatureInstance | thread.featureInstance)]
			private [getClassName(feature)/] [getObjectName(feature)/];
		[/for]
	[/if]
}

[/template]
