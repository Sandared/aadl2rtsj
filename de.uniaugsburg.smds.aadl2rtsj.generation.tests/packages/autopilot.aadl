package autopilot
public
	with Base_Types;

	system Autopilot
	end Autopilot;

	system implementation autopilot.impl
		subcomponents
			simulation: device x_plane.impl;
			autopilot: process autopilotProcess.impl;
		connections
			throttleCon: port autopilot.throttle -> simulation.throttle;
			posCon: port simulation.position -> autopilot.position;
	end autopilot.impl;

	device x_plane
		features
			position: out data port Information.PositionInformation;
			throttle: in data port Command.ThrottleCommand;
	end x_plane;
	
	device implementation x_plane.impl
		
	end x_plane.impl;

	process AutopilotProcess
		features
			position: in data port Information.PositionInformation;
			throttle: out data port Command.ThrottleCommand;
	end AutopilotProcess;

	process implementation autopilotProcess.impl
		subcomponents
			rollControl: thread RollControl.impl;
			mixThrottlesControl: thread MixThrottlesControl.impl;
			pitchControl: thread PitchControl.impl;
			flightMissionExecutionControl: thread FlightMissionExecutionControl.impl;
			positionControl: thread PositionControl.impl;
			altitudeControl: thread AltitudeControl.impl;
			headingControl: thread HeadingControl.impl;
		connections
			con1: port position -> flightMissionExecutionControl.positionIn;
			con2: port flightMissionExecutionControl.shutdownCommand -> mixThrottlesControl.shutdownCommand;
			con3: port flightMissionExecutionControl.positionCommand -> positionControl.positionCommandIn;
			con4: port flightMissionExecutionControl.positionOut -> positionControl.positionInformationIn;
			con5: port flightMissionExecutionControl.positionOut -> headingControl.position;
			con6: port flightMissionExecutionControl.headingCommand -> headingControl.command;
			con7: port positionControl.altitudeCommandOut -> altitudeControl.command;
			con8: port positionControl.positionInformationOut -> rollControl.position;
			con9: port positionControl.positionInformationOut -> pitchControl.position;
			con10: port positionControl.positionInformationOut -> altitudeControl.position;
			con11: port headingControl.throttleRequest -> mixThrottlesControl.headingThrottleRequest;
			con12: port altitudeControl.throttleRequest -> mixThrottlesControl.altitudeThrottleRequest;
			con13: port rollControl.throttleRequest -> mixThrottlesControl.rollThrottleRequest;
			con14: port pitchControl.throttleRequest -> mixThrottlesControl.pitchThrottleRequest;
			con15: port positionControl.pitchCommandOut -> pitchControl.command;
			con16: port positionControl.rollCommandOut -> rollControl.command;
			con17: port mixThrottlesControl.throttleCommand -> throttle;
			con18: port flightMissionExecutionControl.shutdownCommand -> positionControl.shutdownCommandIn;
			con19: port positionControl.throttleCommandOut -> throttle;
			con20: port positionControl.headingCommandOut -> headingControl.command;
end autopilotProcess.impl;

	thread BasicController
		features
			position: in data port Information.PositionInformation;
			command: in data port Command {Classifier_Substitution_Rule => Type_Extension;};
			throttleRequest: out data port Request.ThrottleRequest;
		properties
			Period => 100 ms;
	end BasicController;

	thread implementation HeadingControl.impl
	end HeadingControl.impl;

	thread implementation PitchControl.impl
	end PitchControl.impl;

	thread implementation AltitudeControl.impl
	end AltitudeControl.impl;

	thread implementation RollControl.impl
	end RollControl.impl;

	data Command
	end Command;
	
	data Information
	end Information;
	
	data Request
	end Request;

	data implementation Command.ThrottleCommand
		subcomponents
			throttleEngine1: data Base_Types::Float;
			throttleEngine2: data Base_Types::Float;
			throttleEngine3: data Base_Types::Float;
			throttleEngine4: data Base_Types::Float;
	end Command.ThrottleCommand;

	data implementation Request.ThrottleRequest
		subcomponents
			throttleRequestEngine1: data Base_Types::Float;
			throttleRequestEngine2: data Base_Types::Float;
			throttleRequestEngine3: data Base_Types::Float;
			throttleRequestEngine4: data Base_Types::Float;
			controllerType: data Base_Types::String;
	end Request.ThrottleRequest;

	data implementation Command.ShutdownCommand
		subcomponents
			shutdown: data Base_Types::Boolean;
	end Command.ShutdownCommand;

	data implementation Information.PositionInformation
		subcomponents
			heading: data Base_Types::Float;
			pitch: data Base_Types::Float;
			roll: data Base_Types::Float;
			location: data GeoCoordinate.impl;
	end Information.PositionInformation;

	data implementation Command.PositionCommand
		subcomponents
			altitude: data Base_Types::Float;
			longitude: data Base_Types::Float;
			latitude: data Base_Types::Float;
			loiter: data Base_Types::Boolean;
			shutdown: data Base_Types::Boolean;
	end Command.PositionCommand;

	data implementation Command.AltitudeCommand
		subcomponents
			altitude: data Base_Types::Float;
	end Command.AltitudeCommand;

	data implementation Command.HeadingCommand
		subcomponents
			heading: data Base_Types::Float;
			exit: data Base_Types::Boolean;
			loiter: data Base_Types::Boolean;
	end Command.HeadingCommand;

	data implementation Command.RollCommand
		subcomponents
			roll: data Base_Types::Float;
	end Command.RollCommand;

	data implementation Command.PitchCommand
		subcomponents
			pitch: data Base_Types::Float;
	end Command.PitchCommand;

	thread HeadingControl extends BasicController
		features
			command: refined to in data port Command.HeadingCommand;
	end HeadingControl;

	thread RollControl extends BasicController
		features
			command: refined to in data port Command.RollCommand;
	end RollControl;

	thread PitchControl extends BasicController
		features
			command: refined to in data port Command.PitchCommand;
	end PitchControl;

	thread AltitudeControl extends BasicController
		features
			command: refined to in data port Command.AltitudeCommand;
	end AltitudeControl;

	thread MixThrottlesControl
		features
			throttleCommand: out data port Command.ThrottleCommand;
			rollThrottleRequest: in data port Request.ThrottleRequest;
			pitchThrottleRequest: in data port Request.ThrottleRequest;
			headingThrottleRequest: in data port Request.ThrottleRequest;
			altitudeThrottleRequest: in data port Request.ThrottleRequest;
			shutdownCommand: in data port Command.ShutdownCommand;
		properties
			Period => 100 ms;
	end MixThrottlesControl;

	thread implementation MixThrottlesControl.impl
	end MixThrottlesControl.impl;

	thread FlightMissionExecutionControl
		features
			positionIn: in data port Information.PositionInformation;
			shutdownCommand: out data port Command.ShutdownCommand;
			positionCommand: out data port Command.PositionCommand;
			headingCommand: out data port Command.HeadingCommand;
			positionOut: out data port Information.PositionInformation;
		properties
			Period => 100 ms;
	end FlightMissionExecutionControl;

	thread implementation FlightMissionExecutionControl.impl
	end FlightMissionExecutionControl.impl;

	thread PositionControl
		features
			positionInformationIn: in data port Information.PositionInformation;
			positionCommandIn: in data port Command.PositionCommand;
			shutdownCommandIn: in data port Command.ShutdownCommand;
			
			altitudeCommandOut: out data port Command.AltitudeCommand;
			pitchCommandOut: out data port Command.PitchCommand;
			rollCommandOut: out data port Command.RollCommand;
			headingCommandOut: out data port Command.HeadingCommand;
			positionInformationOut: out data port Information.PositionInformation;
			throttleCommandOut: out data port Command.ThrottleCommand;
		properties
			Period => 100 ms;
	end PositionControl;

	thread implementation PositionControl.impl
	end PositionControl.impl;

	data GeoCoordinate
	end GeoCoordinate;

	data implementation GeoCoordinate.impl
		subcomponents
			latitude: data Base_Types::Float;
			longitude: data Base_Types::Float;
			altitudeMsl: data Base_Types::Float;
			altitudeAgl: data Base_Types::Float;
	end GeoCoordinate.impl;

end autopilot;