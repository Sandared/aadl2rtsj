package autopilot
public
	with Base_Types;

	-- ################### SYSTEM ################### --
	system Autopilot
	end Autopilot;

	system implementation autopilot.impl
		subcomponents
			simulation: device x_plane.impl;
			autopilot: process autopilotProcess.impl;
		connections
			throttleCon: port autopilot.throttleOut -> simulation.throttle;
			posCon: port simulation.position -> autopilot.positionIn;
	end autopilot.impl;

	device x_plane
		features
			position: out data port Information.PositionInformation;
			throttle: in data port Command.ThrottleCommand;
	end x_plane;

	device implementation x_plane.impl
	end x_plane.impl;

	-- ################### PROCESS ################### --
	process AutopilotProcess
		features
			positionIn: in data port Information.PositionInformation;
			throttleOut: out data port Command.ThrottleCommand;
	end AutopilotProcess;

	process implementation autopilotProcess.impl
		subcomponents
			rollControl: thread RollControl.impl;
			mixThrottlesControl: thread MixThrottlesControl.impl;
			pitchControl: thread PitchControl.impl;
			flightMissionExecutionControl: thread FlightMissionExecutionControl.impl;
			positionControl: thread PositionControl.impl;
			altitudeControl: thread AltitudeControl.impl;
			headingControl: thread HeadingControl.impl;
		connections
			con_1: port positionIn -> flightMissionExecutionControl.positionInformationIn;
			con_2: port flightMissionExecutionControl.shutdownCommandOut -> mixThrottlesControl.shutdownCommandIn;
			con_3: port flightMissionExecutionControl.shutdownCommandOut -> positionControl.shutdownCommandIn;
			con_4: port flightMissionExecutionControl.positionCommandOut -> positionControl.positionCommandIn;
			con_5: port flightMissionExecutionControl.positionInformationOut -> positionControl.positionInformationIn;
			con_6: port positionControl.altitudeCommandOut -> altitudeControl.commandIn;
			con_7: port positionControl.rollCommandOut -> rollControl.commandIn;
			con_8: port positionControl.positionInformationOut -> altitudeControl.positionIn;
			con_9: port positionControl.positionInformationOut -> rollControl.positionIn;
			con_10: port positionControl.positionInformationOut -> pitchControl.positionIn;
			con_11: port positionControl.positionInformationOut -> headingControl.positionIn;
			con_12: port positionControl.shutdownCommandOut -> altitudeControl.shutdownCommandIn;
			con_13: port positionControl.shutdownCommandOut -> rollControl.shutdownCommandIn;
			con_14: port positionControl.shutdownCommandOut -> pitchControl.shutdownCommandIn;
			con_15: port positionControl.shutdownCommandOut -> headingControl.shutdownCommandIn;
			con_16: port positionControl.pitchCommandOut -> pitchControl.commandIn;
			con_17: port positionControl.headingCommandOut -> headingControl.commandIn;
			con_18: port altitudeControl.throttleRequestOut -> mixThrottlesControl.altitudeThrottleRequestIn;
			con_19: port rollControl.throttleRequestOut -> mixThrottlesControl.rollThrottleRequestIn;
			con_20: port pitchControl.throttleRequestOut -> mixThrottlesControl.pitchThrottleRequestIn;
			con_21: port headingControl.throttleRequestOut -> mixThrottlesControl.headingThrottleRequestIn;
			con_22: port mixThrottlesControl.throttleCommandOut -> throttleOut;
	end autopilotProcess.impl;

	-- ################### BASIC CONTROLLER ################### --
	thread BasicController
		features
			positionIn: in data port Information.PositionInformation;
			commandIn: in data port Command {Classifier_Substitution_Rule => Type_Extension;};
			throttleRequestOut: out data port Request.ThrottleRequest;
			shutdownCommandIn: in data port Command.ShutdownCommand;
		properties
			Period => 50 ms;
			Priority => 5;
			Dispatch_Protocol => Periodic;
	end BasicController;

	thread HeadingControl extends BasicController
		features
			commandIn: refined to in data port Command.HeadingCommand;
	end HeadingControl;

	thread RollControl extends BasicController
		features
			commandIn: refined to in data port Command.RollCommand;
	end RollControl;

	thread PitchControl extends BasicController
		features
			commandIn: refined to in data port Command.PitchCommand;
	end PitchControl;

	thread AltitudeControl extends BasicController
		features
			commandIn: refined to in data port Command.AltitudeCommand;
	end AltitudeControl;

	thread implementation HeadingControl.impl
	end HeadingControl.impl;

	thread implementation PitchControl.impl
	end PitchControl.impl;

	thread implementation AltitudeControl.impl
	end AltitudeControl.impl;

	thread implementation RollControl.impl
	end RollControl.impl;

	-- ################### SPECIAL CONTROLLER ################### --
	thread MixThrottlesControl
		features
			throttleCommandOut: out data port Command.ThrottleCommand;
			rollThrottleRequestIn: in data port Request.ThrottleRequest;
			pitchThrottleRequestIn: in data port Request.ThrottleRequest;
			headingThrottleRequestIn: in data port Request.ThrottleRequest;
			altitudeThrottleRequestIn: in data port Request.ThrottleRequest;
			shutdownCommandIn: in data port Command.ShutdownCommand;
		properties
			Period => 50 ms;
			Priority => 5;
			Dispatch_Protocol => Periodic;
	end MixThrottlesControl;

	thread implementation MixThrottlesControl.impl
	end MixThrottlesControl.impl;

	thread FlightMissionExecutionControl
		features
			positionInformationIn: in data port Information.PositionInformation;
			shutdownCommandOut: out data port Command.ShutdownCommand;
			positionCommandOut: out data port Command.PositionCommand;
			positionInformationOut: out data port Information.PositionInformation;
		properties
			Period => 50 ms;
			Priority => 5;
			Dispatch_Protocol => Periodic;
	end FlightMissionExecutionControl;

	thread implementation FlightMissionExecutionControl.impl
	end FlightMissionExecutionControl.impl;

	thread PositionControl
		features
			positionInformationIn: in data port Information.PositionInformation;
			positionCommandIn: in data port Command.PositionCommand;
			shutdownCommandIn: in data port Command.ShutdownCommand;
			altitudeCommandOut: out data port Command.AltitudeCommand;
			pitchCommandOut: out data port Command.PitchCommand;
			rollCommandOut: out data port Command.RollCommand;
			headingCommandOut: out data port Command.HeadingCommand;
			positionInformationOut: out data port Information.PositionInformation;
			shutdownCommandOut: out data port Command.ShutdownCommand;
		properties
			Period => 50 ms;
			Priority => 5;
			Dispatch_Protocol => Periodic;
	end PositionControl;

	thread implementation PositionControl.impl
	end PositionControl.impl;
	
	-- ################### SUPER SPECIAL CONTROLLER ################### --

	-- ################### COMMANDS / INFORMATION / REQUESTS ################### --
	data Command
	end Command;

	data Information
	end Information;

	data Request
	end Request;

	data implementation Command.ThrottleCommand
		subcomponents
			throttleEngine1: data Base_Types::Float;
			throttleEngine2: data Base_Types::Float;
			throttleEngine3: data Base_Types::Float;
			throttleEngine4: data Base_Types::Float;
	end Command.ThrottleCommand;

	data implementation Request.ThrottleRequest
		subcomponents
			throttleRequestEngine1: data Base_Types::Float;
			throttleRequestEngine2: data Base_Types::Float;
			throttleRequestEngine3: data Base_Types::Float;
			throttleRequestEngine4: data Base_Types::Float;
			controllerType: data Base_Types::String;
	end Request.ThrottleRequest;

	data implementation Command.ShutdownCommand
		subcomponents
			shutdown: data Base_Types::Boolean;
	end Command.ShutdownCommand;

	data implementation Information.PositionInformation
		subcomponents
			heading: data Base_Types::Float;
			pitch: data Base_Types::Float;
			roll: data Base_Types::Float;
			loiter: data Base_Types::Boolean;
			location: data GeoCoordinate.impl;
	end Information.PositionInformation;

	data implementation Command.PositionCommand
		subcomponents
			altitude: data Base_Types::Float;
			longitude: data Base_Types::Float;
			latitude: data Base_Types::Float;
			loiter: data Base_Types::Boolean;
			heading: data Base_Types::Float;
	end Command.PositionCommand;

	data implementation Command.AltitudeCommand
		subcomponents
			altitude: data Base_Types::Float;
	end Command.AltitudeCommand;

	data implementation Command.HeadingCommand
		subcomponents
			heading: data Base_Types::Float;
			exit: data Base_Types::Boolean;
			loiter: data Base_Types::Boolean;
	end Command.HeadingCommand;

	data implementation Command.RollCommand
		subcomponents
			roll: data Base_Types::Float;
	end Command.RollCommand;

	data implementation Command.PitchCommand
		subcomponents
			pitch: data Base_Types::Float;
	end Command.PitchCommand;

	-- ################### DATA ################### --
	data GeoCoordinate
	end GeoCoordinate;

	data implementation GeoCoordinate.impl
		subcomponents
			latitude: data Base_Types::Float;
			longitude: data Base_Types::Float;
			altitudeMsl: data Base_Types::Float;
			altitudeAgl: data Base_Types::Float;
	end GeoCoordinate.impl;

end autopilot;